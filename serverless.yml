
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: shopping-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  version: 0.0.69-main.0

plugins:
  - serverless-apigateway-route-settings

provider:
  name: aws
  runtime: dotnetcore3.1
  stage: dev
  region: eu-central-1
  logs:
    httpApi: true
  httpApi:
    payload: '1.0' #Or use 1.0

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:*"
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::routing3-cache-files/*"
    - Effect: "Allow"
      Action:
        - "mq:*"
        - "ec2:CreateNetworkInterface"
        - "ec2:CreateNetworkInterfacePermission"
        - "ec2:DeleteNetworkInterface"
        - "ec2:DeleteNetworkInterfacePermission"
        - "ec2:DetachNetworkInterface"
        - "ec2:DescribeInternetGateways"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DescribeNetworkInterfacePermissions"
        - "ec2:DescribeRouteTables"
        - "ec2:DescribeSecurityGroups"
        - "ec2:DescribeSubnets"
        - "ec2:DescribeVpcs"
      Resource: "*"
      
package:
  individually: true
           
functions:
  shopping-service-demo:
    # environment:
    #   Host: ${env:QUEUE_HOST}    #!ImportValue ${self:provider.stage}-DBHost
    #   UserName: ${env:QUEUE_USER}
    #   PassWord: ${env:QUEUE_PASSWORD}
    #   Port: 5671
    #   AUTH_VALID_AUDIENCE: 'ApplicationUser'
    handler: ShoppingServiceV2::ShoppingServiceV2.LambdaEntryPoint::FunctionHandlerAsync

    vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
      securityGroupIds:
        - sg-067d40de060df307c
      subnetIds:
        - subnet-0b583ca34e96879b5
        - subnet-08d23120546babfc9
        - subnet-0da276d776af7d671
    # you can add packaging information here
    package:
      artifact: bin/Release/netcoreapp3.1/shopping-service-demo-${self:custom.version}.zip
    timeout: 20  
    events:
      - httpApi:
          method: GET
          path: /swagger/index.html
      - httpApi:
          method: GET
          path: /swagger/v1/swagger.json
      - httpApi:
          method: GET
          path: /swagger/swagger-ui.css
      - httpApi:
          method: GET
          path: /swagger/swagger-ui-bundle.js
      - httpApi:
          method: GET
          path: /swagger/swagger-ui-standalone-preset.js
      - httpApi:
          method: POST
          path: /product
      - httpApi:
          method: GET
          path: /api/S3Proxy 
      - httpApi:
          method: GET
          path: /api/Values      

resources:
  # Outputs:
  #   VPCId:
  #     Value: !Ref VPC
  #     Export:
  #       Name: ${self:provider.stage}-VPCId
  #   SGId:
  #     Value: !GetAtt ServerlessSecurityGroup.GroupId
  #     Export:
  #       Name: ${self:provider.stage}-LambdaSecurityGroupId
  #   StorageSGId:
  #     Value: !GetAtt ServerlessStorageSecurityGroup.GroupId
  #     Export:
  #       Name: ${self:provider.stage}-StorageSecurityGroupId
  #   PrivateSubnetA:
  #     Value: !Ref PrivateSubnetA
  #     Export:
  #       Name: ${self:provider.stage}-PrivateSubnetA
  #   PrivateSubnetB:
  #     Value: !Ref PrivateSubnetB
  #     Export:
  #       Name: ${self:provider.stage}-PrivateSubnetB
  #   DBHost:
  #     Value: !GetAtt DataSource.Endpoint.Address
  #     Export:
  #       Name: ${self:provider.stage}-DBHost
  #   DBPort:
  #     Value: !GetAtt DataSource.Endpoint.Port
  #     Export:
  #       Name: ${self:provider.stage}-DBPort
  #   CacheFilesBucket:
  #     Value: !Ref CacheFilesBucket
  #     Export:
  #       Name: ${self:provider.stage}-CacheFilesBucket
  Resources:
    # CacheFilesBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: routing3-cocon-${self:provider.stage}-cache-files
    # LambdaPackagesBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: routing3-cocon-lambda-packages
    # VPC:
    #   Type: AWS::EC2::VPC
    #   Properties:
    #     CidrBlock: "10.0.0.0/16"
    #     EnableDnsHostnames: true
    # S3Endpoint:
    #   Type: 'AWS::EC2::VPCEndpoint'
    #   Properties:
    #     PolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Principal: '*'
    #           Action: '*'
    #           Resource: '*'
    #     RouteTableIds:
    #       - Ref: PrivateRouteTableA
    #       - Ref: PrivateRouteTableB
    #     ServiceName: !Sub 'com.amazonaws.${self:provider.region}.s3'
    #     VpcId: 
    #       Ref: VPC
    # IP:
    #   Type: AWS::EC2::EIP
    #   Properties:
    #     Domain: vpc
    # InternetGateway:
    #   Type: AWS::EC2::InternetGateway
    # VPCGatewayAttachment:
    #   Type: AWS::EC2::VPCGatewayAttachment
    #   Properties:
    #     VpcId:
    #       Ref: VPC
    #     InternetGatewayId:
    #       Ref: InternetGateway
    # PrivateSubnetA:
    #   DependsOn: VPC
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: VPC
    #     AvailabilityZone: ${self:provider.region}a
    #     CidrBlock: "10.0.1.0/24"
    # PrivateSubnetB:
    #   DependsOn: VPC
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId:
    #       Ref: VPC
    #     AvailabilityZone: ${self:provider.region}b
    #     CidrBlock: "10.0.2.0/24"
    # PrivateRouteTableA:
    #   Type: AWS::EC2::RouteTable
    #   Properties:
    #     VpcId:
    #       Ref: VPC
    # PrivateRouteA:
    #   Type: AWS::EC2::Route
    #   Properties:
    #     RouteTableId:
    #       Ref: PrivateRouteTableA
    #     DestinationCidrBlock: 0.0.0.0/0
    #     GatewayId:
    #       Ref: InternetGateway
    # PrivateRouteTableB:
    #   Type: AWS::EC2::RouteTable
    #   Properties:
    #     VpcId:
    #       Ref: VPC
    # PrivateRouteB:
    #   Type: AWS::EC2::Route
    #   Properties:
    #     RouteTableId:
    #       Ref: PrivateRouteTableB
    #     DestinationCidrBlock: 0.0.0.0/0
    #     GatewayId:
    #       Ref: InternetGateway
    # SubnetRouteTableAssociationLambdaPrivateA:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     SubnetId:
    #       Ref: PrivateSubnetA
    #     RouteTableId:
    #       Ref: PrivateRouteTableA
    # SubnetRouteTableAssociationLambdaPrivateB:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     SubnetId:
    #       Ref: PrivateSubnetB
    #     RouteTableId:
    #       Ref: PrivateRouteTableB
    ServerlessSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: ${self:provider.stage}-ServerlessSecurityGroup
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: VPC
    # ServerlessSecurityGroupIngress:
    #   DependsOn: VPC
    #   Type: AWS::EC2::SecurityGroupIngress
    #   Properties:
    #     Description: SecurityGroup for Serverless Functions
    #     GroupId: 
    #       Ref: ServerlessSecurityGroup
    #     IpProtocol: tcp
    #     FromPort: 443
    #     ToPort: 443
    #     SourceSecurityGroupId:
    #       Ref: ServerlessSecurityGroup
    ServerlessStorageSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Memcached/RDS Cluster
        GroupName: ${self:provider.stage}-ServerlessStorageSecurityGroup
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: 185.160.73.126/32
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: 113.160.252.73/32
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: 123.25.108.221/32
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: 27.71.248.216/29
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: 83.162.193.198/32
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: 82.94.168.194/32
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5671
          CidrIp: 176.74.244.192/27
    